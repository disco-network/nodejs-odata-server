{"version":3,"sources":["spec/sparql_mappings_spec.ts"],"names":[],"mappings":"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","file":"spec/sparql_mappings_spec.js","sourcesContent":["import helper = require('./helpers/sparql_mappings');\n\ndescribe('unstructured odata to sparql mappings', function() {\n  it('should not exist entries until they were accessed', function() {\n    var mapping = helper.createUnstructuredMapping();\n\n    expect(mapping.mappingExists('Id')).toEqual(false);\n    mapping.getPropertyVariable('Id');\n    expect(mapping.mappingExists('Id')).toEqual(true);\n  })\n  it('should call the first variable ?x0', function() {\n    var mapping = helper.createUnstructuredMapping();\n    var first = mapping.getPropertyVariable('Id');\n\n    expect(first).toEqual('?x0');\n  })\n  it('should always return the same variable name for the same entry', function() {\n    var mapping = helper.createUnstructuredMapping();\n    var first = mapping.getPropertyVariable('Id');\n    var second = mapping.getPropertyVariable('Id');\n\n    expect(first).toEqual(second);\n  })\n  it('should always return a different variable name for different entries', function() {\n    var mapping = helper.createUnstructuredMapping();\n    var a = mapping.getPropertyVariable('A');\n    var b = mapping.getPropertyVariable('B');\n\n    expect(a).not.toEqual(b);\n  })\n})\n\ndescribe('structured odata to sparql mappings', function() {\n  it('should return the specified root variable name', function() {\n    var mapping = helper.createStructuredMapping('?root');\n    var variable = mapping.getVariable();\n\n    expect(variable).toEqual('?root');\n  })\n  it('should call the first elementary property variable ?x0', function() {\n    var mapping = helper.createStructuredMapping('?root');\n    var variable = mapping.getElementaryPropertyVariable('Id');\n\n    expect(variable).toEqual('?x0');\n  })\n  it('should call the first complex property variable ?x0', function() {\n    var mapping = helper.createStructuredMapping('?root');\n    var variable = mapping.getComplexProperty('Content').getVariable();\n\n    expect(variable).toEqual('?x0');\n  })\n  it('should nest the mappings using complex properties', function() {\n    var mapping = helper.createStructuredMapping('?root');\n    var contentContentId1 = mapping.getComplexProperty('Content').getComplexProperty('Content').getElementaryPropertyVariable('Id');\n    var contentContentId2 = mapping.getComplexProperty('Content').getComplexProperty('Content').getElementaryPropertyVariable('Id');\n    var id = mapping.getElementaryPropertyVariable('Id');\n\n    expect(contentContentId1).toEqual(contentContentId2);\n    expect(contentContentId1).not.toEqual(id);\n  })\n  it('should not exist elementary properties until they were accessed', function() {\n    var mapping = helper.createStructuredMapping('?root');\n\n    expect(mapping.elementaryPropertyExists('Id')).toEqual(false);\n    mapping.getElementaryPropertyVariable('Id');\n    expect(mapping.elementaryPropertyExists('Id')).toEqual(true);\n  })\n})\n"],"sourceRoot":"/source/"}