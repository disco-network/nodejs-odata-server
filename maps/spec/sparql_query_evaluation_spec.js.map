{"version":3,"sources":["spec/sparql_query_evaluation_spec.ts"],"names":[],"mappings":"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","file":"spec/sparql_query_evaluation_spec.js","sourcesContent":["import SchemaModule = require(\"../src/odata/schema\");\nlet schema = new SchemaModule.Schema();\nimport squeries = require(\"../src/adapter/queries_sparql\");\nimport queries = require(\"../src/odata/queries\");\nimport mhelper = require(\"./helpers/sparql_mappings\");\n\ndescribe(\"query context\", function() {\n  it(\"should recognize and enumerate over elementary properties\", function() {\n    let mapping = mhelper.createStructuredMapping(\"?post\");\n    let queryContext = new squeries.SparqlQueryContext(mapping, schema.getEntityType(\"Post\"), { });\n\n    let idVar = mapping.getElementaryPropertyVariable(\"Id\");\n    let answer = { };\n    answer[idVar.substr(1)] = { token: \"literal\", value: \"5\" };\n\n    let ok = false;\n    queryContext.forEachElementaryPropertyOfResult(answer, function() { ok = true; });\n\n    expect(ok).toEqual(true);\n  });\n  it(\"should return me a subcontext and recognize its elementary properties\", function() {\n    let mapping = mhelper.createStructuredMapping(\"?post\");\n    let queryContext = new squeries.SparqlQueryContext(mapping, schema.getEntityType(\"Post\"), { Parent: {} });\n\n    let idVar = mapping.getComplexProperty(\"Parent\").getElementaryPropertyVariable(\"Id\");\n    let answer = { };\n    answer[idVar.substr(1)] = { token: \"literal\", value: \"5\" };\n\n    let ok = false;\n    queryContext.getSubContext(\"Parent\").forEachElementaryPropertyOfResult(answer, function() { ok = true; });\n\n    expect(ok).toEqual(true);\n  });\n});\n\ndescribe(\"match evaluator\", function() {\n  it(\"should evaluate elem. and complex properties\", function() {\n    let mapping = mhelper.createStructuredMapping(\"?post\");\n    let queryContext = new squeries.SparqlQueryContext(mapping, schema.getEntityType(\"Post\"), { Parent: {} });\n    let evaluator = new queries.QueryResultEvaluator();\n\n    let idVar = mapping.getElementaryPropertyVariable(\"Id\");\n    let parentIdVar = mapping.getComplexProperty(\"Parent\").getElementaryPropertyVariable(\"Id\");\n\n    let responses = [{}];\n    responses[0][parentIdVar.substr(1)] = { token: \"literal\", value: \"5\" };\n    responses[0][idVar.substr(1)] = { token: \"literal\", value: \"1\" };\n    let results = evaluator.evaluate(responses, queryContext);\n\n    expect(results[0].Content).toBeUndefined();\n    expect(results[0].Id).toEqual(\"1\");\n    expect(results[0].Parent.Id).toEqual(\"5\");\n  });\n  it(\"should only include complex properties which are in the expand tree\", function() {\n    let mapping = mhelper.createStructuredMapping(\"?post\");\n    let queryContext = new squeries.SparqlQueryContext(mapping, schema.getEntityType(\"Post\"), {});\n    let evaluator = new queries.QueryResultEvaluator();\n\n    let parentIdVar = mapping.getComplexProperty(\"Parent\").getElementaryPropertyVariable(\"Id\");\n\n    let responses = [{}];\n    responses[0][parentIdVar.substr(1)] = { token: \"literal\", value: \"5\" };\n    let results = evaluator.evaluate(responses, queryContext);\n\n    expect(results[0].Parent).toBeUndefined();\n  });\n  it(\"should include complex properties of quantity one\", function() {\n    let mapping = mhelper.createStructuredMapping(\"?post\");\n    let queryContext = new squeries.SparqlQueryContext(mapping, schema.getEntityType(\"Post\"), { Content: {} });\n    let evaluator = new queries.QueryResultEvaluator();\n\n    let idVar = mapping.getElementaryPropertyVariable(\"Id\");\n    let contentIdVar = mapping.getComplexProperty(\"Content\").getElementaryPropertyVariable(\"Id\");\n\n    let responses = [{}, {}];\n    responses[0][idVar.substr(1)] = { token: \"literal\", value: \"1\" };\n    responses[1][idVar.substr(1)] = { token: \"literal\", value: \"1\" };\n    responses[1][contentIdVar.substr(1)] = { token: \"literal\", value: \"2\" };\n    let results = evaluator.evaluate(responses, queryContext);\n\n    expect(results.length).toEqual(1);\n    expect(results[0].Id).toEqual(\"1\");\n    expect(results[0].Content.Id).toEqual(\"2\");\n  });\n  it(\"should support expand trees of depth two\", function() {\n    let mapping = mhelper.createStructuredMapping(\"?post\");\n    let queryContext = new squeries.SparqlQueryContext(mapping, schema.getEntityType(\"Post\"),\n      { Content: { Culture: {} } });\n    let evaluator = new queries.QueryResultEvaluator();\n\n    let idVar = mapping.getElementaryPropertyVariable(\"Id\");\n    let cidVar = mapping.getComplexProperty(\"Content\").getElementaryPropertyVariable(\"Id\");\n    let ccidVar = mapping.getComplexProperty(\"Content\").getComplexProperty(\"Culture\")\n      .getElementaryPropertyVariable(\"Id\");\n\n    let responses = [{}, {}];\n    let [ response1, response2 ] = responses;\n    response1[idVar.substr(1)] = response2[idVar.substr(1)] = makeLiteral(\"1\");\n    response1[cidVar.substr(1)] = response2[cidVar.substr(1)] = makeLiteral(\"2\");\n    response2[ccidVar.substr(1)] = makeLiteral(\"3\");\n    let results = evaluator.evaluate(responses, queryContext);\n\n    expect(results.length).toEqual(1);\n  });\n});\n\nfunction makeLiteral(value) {\n  return { token: \"literal\", value: value };\n}\n"],"sourceRoot":"/source/"}