{"version":3,"sources":["spec/sparql_query_evaluation_spec.ts"],"names":[],"mappings":"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","file":"spec/sparql_query_evaluation_spec.js","sourcesContent":["import SchemaModule = require(\"../src/odata/schema\");\nlet schema = new SchemaModule.Schema();\nimport squeries = require(\"../src/adapter/queries_sparql\");\nimport queries = require(\"../src/odata/queries\");\nimport mhelper = require(\"./helpers/sparql_mappings\");\n\ndescribe(\"query context\", function() {\n  it(\"should recognize and enumerate over elementary properties\", function() {\n    let mapping = mhelper.createStructuredMapping(\"?post\");\n    let queryContext = new squeries.SparqlQueryContext(mapping, schema.getEntityType(\"Post\"), { });\n\n    let idVar = mapping.getElementaryPropertyVariable(\"Id\");\n    let answer = { };\n    answer[idVar.substr(1)] = { token: \"literal\", value: \"5\" };\n\n    let ok = false;\n    queryContext.forEachElementaryPropertyOfResult(answer, function() { ok = true; });\n\n    expect(ok).toEqual(true);\n  });\n  it(\"should return me a subcontext and recognize its elementary properties\", function() {\n    let mapping = mhelper.createStructuredMapping(\"?post\");\n    let queryContext = new squeries.SparqlQueryContext(mapping, schema.getEntityType(\"Post\"), { Parent: {} });\n\n    let idVar = mapping.getComplexProperty(\"Parent\").getElementaryPropertyVariable(\"Id\");\n    let answer = { };\n    answer[idVar.substr(1)] = { token: \"literal\", value: \"5\" };\n\n    let ok = false;\n    queryContext.getSubContext(\"Parent\").forEachElementaryPropertyOfResult(answer, function() { ok = true; });\n\n    expect(ok).toEqual(true);\n  });\n});\n\ndescribe(\"match evaluator\", function() {\n  it(\"should evaluate elem. and complex properties\", function() {\n    let mapping = mhelper.createStructuredMapping(\"?post\");\n    let queryContext = new squeries.SparqlQueryContext(mapping, schema.getEntityType(\"Post\"), { Parent: {} });\n    let evaluator = new queries.QueryResultEvaluator();\n\n    let idVar = mapping.getElementaryPropertyVariable(\"Id\");\n    let parentIdVar = mapping.getComplexProperty(\"Parent\").getElementaryPropertyVariable(\"Id\");\n\n    let answer = {};\n    answer[parentIdVar.substr(1)] = { token: \"literal\", value: \"5\" };\n    answer[idVar.substr(1)] = { token: \"literal\", value: \"1\" };\n    let result = evaluator.evaluate(answer, queryContext);\n\n    expect(result.Content).toBeUndefined();\n    expect(result.Id).toEqual(\"1\");\n    expect(result.Parent.Id).toEqual(\"5\");\n  });\n  it(\"should only include complex properties which are in the expand tree\", function() {\n    let mapping = mhelper.createStructuredMapping(\"?post\");\n    let queryContext = new squeries.SparqlQueryContext(mapping, schema.getEntityType(\"Post\"), {});\n    let evaluator = new queries.QueryResultEvaluator();\n\n    let parentIdVar = mapping.getComplexProperty(\"Parent\").getElementaryPropertyVariable(\"Id\");\n\n    let answer = {};\n    answer[parentIdVar.substr(1)] = { token: \"literal\", value: \"5\" };\n    let result = evaluator.evaluate(answer, queryContext);\n\n    expect(result.Parent).toBeUndefined();\n  });\n});\n"],"sourceRoot":"/source/"}