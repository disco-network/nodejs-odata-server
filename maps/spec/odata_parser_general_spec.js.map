{"version":3,"sources":["spec/odata_parser_general_spec.ts"],"names":[],"mappings":"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","file":"spec/odata_parser_general_spec.js","sourcesContent":["import abnfTokenizer = require(\"abnfjs/tokenizer\");\nimport abnfParser = require(\"abnfjs/parser\");\nimport abnfInterpreter = require(\"abnfjs/interpreter\");\nimport fs = require(\"fs\");\n\ndescribe(\"odata parser\", function() {\n  it(\"should parse an OData filter expression\", function() {\n    let parser = initODataParser();\n    let result = parser.getCompleteMatch(parser.getPattern(\"odataRelativeUri\"), \"Posts?$filter=$it/a/b/c eq 1\");\n    let evaluated = result.evaluate();\n\n    expect(evaluated.queryOptions).toBeDefined();\n    expect(evaluated.queryOptions.filter).toBeDefined();\n    expect(evaluated.queryOptions.filter.type).toEqual(\"operator\");\n    expect(evaluated.queryOptions.filter.lhs.type).toEqual(\"member-expression\");\n    expect(evaluated.queryOptions.filter.rhs.type).toEqual(\"decimalValue\");\n  });\n\n  it(\"should parse an OData expand expression\", function() {\n    let parser = initODataParser();\n    let result = parser.getCompleteMatch(parser.getPattern(\"odataRelativeUri\"),\n      \"Posts?$expand=Children/ReferredFrom\").evaluate();\n\n    expect(result.queryOptions.expand.length).toEqual(1);\n    expect(result.queryOptions.expand[0].path[0]).toEqual(\"Children\");\n    expect(result.queryOptions.expand[0].path[1]).toEqual(\"ReferredFrom\");\n  });\n\n  /*it(\"should parse a string\", () => {\n    let tokens = abnfTokenizer.tokenize(\"\\\"'\\\" (*( SQUOTE-in-string / pchar-no-SQUOTE )):value \\\"'\\\"\");\n  });*/\n\n  it(\"should parse a simple filter expression\", () => {\n    let parser = initODataParser();\n    let result = parser.getCompleteMatch(parser.getPattern(\"odataRelativeUri\"),\n      \"Posts?$filter='2' eq '1'\").evaluate();\n\n    let filterOption = result.queryOptions.filter;\n    expect(filterOption.rhs.type).toBe(\"string\");\n    expect(filterOption.rhs.value).toBe(\"1\");\n  });\n\n  function initODataParser() {\n    let abnf = fs.readFileSync(\"./src/odata/odata4-mod.abnf\", \"utf8\");\n    let tok = abnfTokenizer.tokenize(abnf);\n    let par = abnfParser.parse(tok);\n    let inter = new abnfInterpreter.Interpreter(par);\n\n    return inter;\n  }\n});\n"],"sourceRoot":"/source/"}