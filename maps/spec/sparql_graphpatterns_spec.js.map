{"version":3,"sources":["spec/sparql_graphpatterns_spec.ts"],"names":[],"mappings":"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","file":"spec/sparql_graphpatterns_spec.js","sourcesContent":["\nimport SchemaModule = require(\"../src/odata/schema\");\nlet schema = new SchemaModule.Schema();\nimport gpatterns = require(\"../src/adapter/sparql_graphpatterns\");\nimport mhelper = require(\"./helpers/sparql_mappings\");\n\ndescribe(\"tree graph patterns\", function() {\n  it(\"should build a consistent tree\", function() {\n    let gp = new gpatterns.TreeGraphPattern(\"?root\");\n\n    gp.branch(\"disco:id\", \"?id\");\n\n    expect(gp.branchExists(\"disco:id\")).toEqual(true);\n    expect(gp.branchExists(\"disco:content\")).toEqual(false);\n    expect(gp.branch(\"disco:id\")[0].name()).toEqual(\"?id\");\n  });\n  it(\"should generate triples\", function() {\n    let gp = new gpatterns.TreeGraphPattern(\"?root\");\n\n    gp.branch(\"disco:id\", \"?id\");\n    gp.branch(\"disco:content\", \"?cnt\").branch(\"disco:id\", \"?cntid\");\n\n    expect(gp.getDirectTriples()).toContain([ \"?root\", \"disco:id\", \"?id\" ]);\n    expect(gp.getDirectTriples()).toContain([ \"?root\", \"disco:content\", \"?cnt\" ]);\n    expect(gp.branch(\"disco:content\")[0].getDirectTriples()).toContain([ \"?cnt\", \"disco:id\", \"?cntid\" ]);\n  });\n  it(\"should allow value leaves\", function() {\n    let gp = new gpatterns.TreeGraphPattern(\"?root\");\n    gp.branch(\"disco:id\", new gpatterns.ValueLeaf(\"1\"));\n\n    expect(gp.getDirectTriples()).toContain([ \"?root\", \"disco:id\", \"\\\"1\\\"\"]);\n  });\n  it(\"should allow optional branches\", function() {\n    let gp = new gpatterns.TreeGraphPattern(\"?root\");\n\n    gp.optionalBranch(\"disco:id\", \"?id\");\n\n    expect(gp.getOptionalPatterns()[0].getDirectTriples()).toContain([ \"?root\", \"disco:id\", \"?id\" ]);\n  });\n  it(\"should allow me to integrate other trees as branches\", function() {\n    let gp = new gpatterns.TreeGraphPattern(\"?root\");\n    let inner = new gpatterns.TreeGraphPattern(\"?inner\");\n\n    inner.branch(\"disco:id\", \"?id\");\n    gp.branch(\"disco:inner\", inner);\n\n    expect(gp.branch(\"disco:inner\")[0]).toEqual(inner);\n  });\n  it(\"should allow me to integrate other trees as optional branches\", function() {\n    let gp = new gpatterns.TreeGraphPattern(\"?root\");\n    let inner = new gpatterns.TreeGraphPattern(\"?inner\");\n\n    inner.branch(\"disco:id\", \"?id\");\n    gp.optionalBranch(\"disco:inner\", inner);\n\n    expect(gp.getOptionalPatterns()[0].getDirectTriples()).toContain([ \"?root\", \"disco:inner\", \"?inner\" ]);\n    expect(gp.getOptionalPatterns()[0].branch(\"disco:inner\")[0]).toEqual(inner);\n  });\n  it(\"should allow me to merge with other trees\", function() {\n    let gp = new gpatterns.TreeGraphPattern(\"?root\");\n    let other = new gpatterns.TreeGraphPattern(\"?root\");\n\n    other.branch(\"disco:id\", \"?id\");\n    gp.merge(other);\n\n    expect(gp.getDirectTriples()).toContain([ \"?root\", \"disco:id\", \"?id\" ]);\n  });\n  it(\"should not allow me to merge with trees with different roots\", function() {\n    let gp = new gpatterns.TreeGraphPattern(\"?root\");\n    let other = new gpatterns.TreeGraphPattern(\"?other\");\n\n    other.branch(\"disco:id\", \"?id\");\n    expect(function() { gp.merge(other); }).toThrow();\n  });\n  it(\"should detect and handle collisions when merging\", function() {\n    let gp = new gpatterns.TreeGraphPattern(\"?root\");\n    let gp2 = new gpatterns.TreeGraphPattern(\"?root\");\n\n    gp.branch(\"id\", \"?id\");\n    gp2.branch(\"id\", \"?id2\");\n    gp.merge(gp2);\n\n    expect(gp.branch(\"id\").length).toEqual(2);\n  });\n  it(\"should allow UNION branches\", function() {\n    let gp = new gpatterns.TreeGraphPattern(\"?root\");\n    let union1 = new gpatterns.TreeGraphPattern(\"?u1\");\n    let union2 = new gpatterns.TreeGraphPattern(\"?u2\");\n\n    let upat = gp.newUnionPattern();\n    upat.branch(\"id\", union1);\n    upat.branch(\"id\", union2);\n\n    expect(gp.getUnionPatterns().length).toEqual(1);\n    expect(gp.getUnionPatterns().length).toEqual(1);\n    expect(gp.getUnionPatterns()[0].branch(\"id\").length).toEqual(2);\n  });\n  it(\"should have inverse branches\", function() {\n    let gp = new gpatterns.TreeGraphPattern(\"?root\");\n    gp.inverseBranch(\"disco:parent\", \"?child\");\n  });\n});\n\ndescribe(\"direct property graph patterns\", function() {\n  it(\"should store the direct properties in the mapping\", function() {\n    let mapping = mhelper.createStructuredMapping();\n    new gpatterns.DirectPropertiesGraphPattern(schema.getEntityType(\"Post\"), mapping, \"\");\n\n    expect(mapping.elementaryPropertyExists(\"Id\")).toEqual(true);\n    expect(mapping.elementaryPropertyExists(\"ParentId\")).toEqual(true);\n    expect(mapping.elementaryPropertyExists(\"ContentId\")).toEqual(true);\n    expect(mapping.elementaryPropertyExists(\"Parent\")).toEqual(false);\n    expect(mapping.elementaryPropertyExists(\"Content\")).toEqual(false);\n  });\n  it(\"should create the triples corresponding to the direct properties\", function() {\n    let mapping = mhelper.createStructuredMapping(\"?post\");\n    let gp = new gpatterns.DirectPropertiesGraphPattern(schema.getEntityType(\"Post\"), mapping, \"\");\n\n    expect(gp.getDirectTriples()).toContain([ \"?post\", \"disco:id\", mapping.getElementaryPropertyVariable(\"Id\") ]);\n  });\n  it(\"should create the triples corresponding to the mirrored direct properties\", function() {\n    let mapping = mhelper.createStructuredMapping(\"?post\");\n    let gp = new gpatterns.DirectPropertiesGraphPattern(schema.getEntityType(\"Post\"), mapping, \"\");\n\n    expect(gp.getDirectTriples()).toContain(\n      [ \"?post\", \"disco:content\", mapping.getComplexProperty(\"Content\").getVariable() ]);\n    expect(gp.branch(\"disco:content\")[0].getDirectTriples()).toContain(\n      [ mapping.getComplexProperty(\"Content\").getVariable(), \"disco:id\",\n      mapping.getElementaryPropertyVariable(\"ContentId\") ]);\n  });\n  it(\"should create optional triples\", function() {\n    let mapping = mhelper.createStructuredMapping(\"?post\");\n    let gp = new gpatterns.DirectPropertiesGraphPattern(schema.getEntityType(\"Post\"), mapping, \"\");\n\n    expect(gp.getOptionalPatterns()[0].getDirectTriples()).toContain(\n      [ \"?post\", \"disco:parent\", mapping.getComplexProperty(\"Parent\").getVariable() ]);\n  });\n});\n\ndescribe(\"expand tree graph patterns\", function() {\n  it(\"should expand the first depth level\", function() {\n    let expandTree = { Content: {} };\n    let mapping = mhelper.createStructuredMapping(\"?post\");\n    let gp = new gpatterns.ExpandTreeGraphPattern(schema.getEntityType(\"Post\"), expandTree, mapping);\n\n    expect(mapping.getComplexProperty(\"Content\").elementaryPropertyExists(\"Id\")).toEqual(true);\n    expect(gp.getUnionPatterns().length).toEqual(2);\n    expect(gp.getUnionPatterns()[0].getDirectTriples()).toContain(\n      [ \"?post\", \"disco:content\", mapping.getComplexProperty(\"Content\").getVariable() ]);\n    expect(gp.getUnionPatterns()[1].branch(\"disco:content\")[0].getDirectTriples())\n    .toContain([ mapping.getComplexProperty(\"Content\").getVariable(), \"disco:id\",\n      mapping.getComplexProperty(\"Content\").getElementaryPropertyVariable(\"Id\") ]);\n    /* OLD: expect(gp.getUnionPatterns()[1].branch(\"disco:content\")[0].getUnionPatterns()[0].getTriples())\n    .toContain([ mapping.getComplexProperty(\"Content\").getVariable(), \"disco:id\",\n      mapping.getComplexProperty(\"Content\").getElementaryPropertyVariable(\"Id\") ]);*/\n    expect(gp.getDirectTriples()).toContain([ \"?post\", \"disco:id\", mapping.getElementaryPropertyVariable(\"Id\") ]);\n  });\n  it(\"should expand the second depth level\", function() {\n    let expandTree = { Content: { Content: {} } };\n    let mapping = mhelper.createStructuredMapping(\"?post\");\n    new gpatterns.ExpandTreeGraphPattern(schema.getEntityType(\"Post\"), expandTree, mapping);\n\n    expect(mapping.getComplexProperty(\"Content\").getComplexProperty(\"Content\")\n    .elementaryPropertyExists(\"Id\")).toEqual(true);\n  });\n  it(\"should expand the optional properties of the first depth level\", function() {\n    let expandTree = { Parent: {} };\n    let mapping = mhelper.createStructuredMapping(\"?post\");\n    let gp = new gpatterns.ExpandTreeGraphPattern(schema.getEntityType(\"Post\"), expandTree, mapping);\n\n    expect(mapping.getComplexProperty(\"Parent\").elementaryPropertyExists(\"Id\")).toEqual(true);\n    expect(gp.getUnionPatterns()[1].branch(\"disco:parent\")[0].getDirectTriples()).toContain(\n      [ mapping.getComplexProperty(\"Parent\").getVariable(), \"disco:id\",\n        mapping.getComplexProperty(\"Parent\").getElementaryPropertyVariable(\"Id\") ]);\n  });\n});\n"],"sourceRoot":"/source/"}