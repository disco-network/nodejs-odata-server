{"version":3,"sources":["spec/rdfstore_compatibility_spec.ts"],"names":[],"mappings":"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","file":"spec/rdfstore_compatibility_spec.js","sourcesContent":["import rdfstore = require(\"rdfstore\");\n\ndescribe(\"rdfstore should execute\", function() {\n  createSpec(\"SELECT * WHERE { ?s rdf:type disco:Post }\", answer => {\n    expect(answer.result.length).toBeGreaterThan(0);\n  });\n\n  createSpec(\"SELECT * WHERE { ?s rdf:type disco:Post FILTER EXISTS { ?s disco:id '1'  } }\", answer => {\n    expect(answer.result.length).toBe(1);\n  });\n\n  createSpec(\"SELECT * WHERE { ?s rdf:type disco:Post . ?s disco:id ?id FILTER(?id = '1') }\", answer => {\n    expect(answer.result.length).toBe(1);\n  });\n\n  createSpec(\"SELECT * WHERE { ?s rdf:type disco:Post FILTER(EXISTS { ?s disco:id '1' }) }\", answer => {\n    expect(answer.result.length).toBe(1);\n  });\n\n  createSpec(\"SELECT * WHERE { ?s rdf:type disco:Post . ?s disco:id ?id \"\n    + \"FILTER(?id = '1' && EXISTS { ?s disco:content ?cnt . ?cnt disco:id '1' ] }) }\", answer => {\n    expect(answer.error).toBeUndefined();\n    expect(answer.result.length).toBe(1);\n  });\n\n  function createSpec(query: string, cb: (results: any) => void) {\n    let prefixes = \"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \";\n    prefixes += \"PREFIX disco: <http://disco-network.org/resource/> \";\n    it(query, done => {\n      rdfstore.create((error, store) => {\n        let graphName = \"http://example.org\";\n        storeSeed(store, graphName, () => {\n          store.executeWithEnvironment(prefixes + query, [graphName], [], (err, results) => {\n            cb({ error: err, result: results });\n            done();\n          });\n        });\n      });\n    });\n  }\n});\n\nfunction storeSeed(store, graphName, cb) {\n  store.rdf.setPrefix(\"rdf\", \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\");\n  store.rdf.setPrefix(\"disco\", \"http://disco-network.org/resource/\");\n\n  let graph = store.rdf.createGraph();\n  let node = createNamedNode.bind(store);\n  let literal = createLiteral.bind(store);\n\n  graph.add(store.rdf.createTriple(\n    node(\"disco:post1\"), node(\"rdf:type\"), node(\"disco:Post\")\n  ));\n  graph.add(store.rdf.createTriple(\n    node(\"disco:post1\"), node(\"disco:id\"), literal(\"1\")\n  ));\n  graph.add(store.rdf.createTriple(\n    node(\"disco:post1\"), node(\"disco:content\"), node(\"disco:content1\")\n  ));\n\n  graph.add(store.rdf.createTriple(\n    node(\"disco:post2\"), node(\"rdf:type\"), node(\"disco:Post\")\n  ));\n  graph.add(store.rdf.createTriple(\n    node(\"disco:post2\"), node(\"disco:id\"), literal(\"2\")\n  ));\n  graph.add(store.rdf.createTriple(\n    node(\"disco:post2\"), node(\"disco:content\"), node(\"disco:content2\")\n  ));\n\n  graph.add(store.rdf.createTriple(\n    node(\"disco:content1\"), node(\"disco:id\"), literal(\"1\")\n  ));\n  graph.add(store.rdf.createTriple(\n    node(\"disco:content1\"), node(\"disco:title\"), literal(\"Post Nr. 1\")\n  ));\n\n  graph.add(store.rdf.createTriple(\n    node(\"disco:content2\"), node(\"disco:id\"), literal(\"2\")\n  ));\n  graph.add(store.rdf.createTriple(\n    node(\"disco:content2\"), node(\"disco:title\"), literal(\"Post Nr. 2\")\n  ));\n\n  store.insert(graph, graphName, cb);\n}\n\nfunction createNamedNode(str) {\n  return this.rdf.createNamedNode(this.rdf.resolve(str));\n}\n\nfunction createLiteral(str) {\n  return this.rdf.createLiteral(str);\n}\n"],"sourceRoot":"/source/"}