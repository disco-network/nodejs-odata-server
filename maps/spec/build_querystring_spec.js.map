{"version":3,"sources":["spec/build_querystring_spec.ts"],"names":[],"mappings":";AAAA,IAAO,SAAS,WAAW,qCAAqC,CAAC,CAAC;AAClE,IAAO,QAAQ,WAAW,oCAAoC,CAAC,CAAC;AAEhE,QAAQ,CAAC,0BAA0B,EAAE;IACnC,EAAE,CAAC,iDAAiD,EAAE;QACpD,IAAI,OAAO,GAAG,IAAI,SAAS,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QACtD,OAAO,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;QACzD,OAAO,CAAC,MAAM,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC,MAAM,CAAC,gBAAgB,EAAE,IAAI,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;QAEhG,IAAI,OAAO,GAAG,IAAI,QAAQ,CAAC,kBAAkB,EAAE,CAAC;QAChD,IAAI,WAAW,GAAG,OAAO,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;QAE3D,MAAM,CAAC,WAAW,CAAC,CAAC,OAAO,CACzB,2BAA2B;YAC3B,yDAAyD,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,iCAAiC,EAAE;QACpC,IAAI,OAAO,GAAG,IAAI,SAAS,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QACtD,OAAO,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;QACzD,OAAO,CAAC,eAAe,EAAE,CAAC,MAAM,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;QAC5D,OAAO,CAAC,eAAe,EAAE,CAAC,aAAa,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;QAElE,IAAI,OAAO,GAAG,IAAI,QAAQ,CAAC,kBAAkB,EAAE,CAAC;QAChD,IAAI,WAAW,GAAG,OAAO,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;QAE3D,MAAM,CAAC,WAAW,CAAC,CAAC,OAAO,CACzB,2BAA2B;YAC3B,sEAAsE,CACvE,CAAC;IACJ,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,yCAAyC,EAAE;QAC5C,IAAI,OAAO,GAAG,IAAI,SAAS,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QACtD,OAAO,CAAC,eAAe,EAAE,CAAC,eAAe,EAAE,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;QAE7F,IAAI,OAAO,GAAG,IAAI,QAAQ,CAAC,kBAAkB,EAAE,CAAC;QAChD,IAAI,WAAW,GAAG,OAAO,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;QAE3D,MAAM,CAAC,WAAW,CAAC,CAAC,OAAO,CACzB,kCAAkC,CACnC,CAAC;IACJ,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,iCAAiC,EAAE;QACpC,IAAI,OAAO,GAAG,IAAI,SAAS,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QACtD,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC,eAAe,EAAE,CAAC,MAAM,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QAEpF,IAAI,OAAO,GAAG,IAAI,QAAQ,CAAC,kBAAkB,EAAE,CAAC;QAChD,IAAI,WAAW,GAAG,OAAO,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;QAE3D,MAAM,CAAC,WAAW,CAAC,CAAC,OAAO,CACzB,sDAAsD,CACvD,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"spec/build_querystring_spec.js","sourcesContent":["import gpatterns = require(\"../src/adapter/sparql_graphpatterns\");\nimport qbuilder = require(\"../src/adapter/querystring_builder\");\n\ndescribe(\"the query string builder\", function() {\n  it(\"should build queries without UNION and OPTIONAL\", function() {\n    let pattern = new gpatterns.TreeGraphPattern(\"?root\");\n    pattern.branch(\"disco:id\", new gpatterns.ValueLeaf(\"1\"));\n    pattern.branch(\"disco:refersTo\", \"?ref\").branch(\"disco:referree\", new gpatterns.ValueLeaf(\"2\"));\n\n    let builder = new qbuilder.QueryStringBuilder();\n    let queryString = builder.buildGraphPatternString(pattern);\n\n    expect(queryString).toEqual(\n      \"{ ?root disco:id \\\"1\\\" . \" +\n      \"?root disco:refersTo ?ref . ?ref disco:referree \\\"2\\\" }\");\n  });\n  it(\"should build queries with UNION\", function() {\n    let pattern = new gpatterns.TreeGraphPattern(\"?root\");\n    pattern.branch(\"disco:id\", new gpatterns.ValueLeaf(\"1\"));\n    pattern.newUnionPattern().branch(\"disco:parent\", \"?parent\");\n    pattern.newUnionPattern().inverseBranch(\"disco:parent\", \"?child\");\n\n    let builder = new qbuilder.QueryStringBuilder();\n    let queryString = builder.buildGraphPatternString(pattern);\n\n    expect(queryString).toEqual(\n      \"{ ?root disco:id \\\"1\\\" . \" +\n      \"{ ?root disco:parent ?parent } UNION { ?child disco:parent ?root } }\"\n    );\n  });\n  it(\"should build queries with nested UNIONs\", function() {\n    let pattern = new gpatterns.TreeGraphPattern(\"?root\");\n    pattern.newUnionPattern().newUnionPattern().branch(\"disco:id\", new gpatterns.ValueLeaf(\"1\"));\n\n    let builder = new qbuilder.QueryStringBuilder();\n    let queryString = builder.buildGraphPatternString(pattern);\n\n    expect(queryString).toEqual(\n      \"{ { { ?root disco:id \\\"1\\\" } } }\"\n    );\n  });\n  it(\"should build unions of branches\", function() {\n    let pattern = new gpatterns.TreeGraphPattern(\"?root\");\n    pattern.branch(\"disco:content\", \"?cnt\").newUnionPattern().branch(\"disco:id\", \"?id\");\n\n    let builder = new qbuilder.QueryStringBuilder();\n    let queryString = builder.buildGraphPatternString(pattern);\n\n    expect(queryString).toEqual(\n      \"{ ?root disco:content ?cnt . { ?cnt disco:id ?id } }\"\n    );\n  });\n});\n"],"sourceRoot":"/source/"}