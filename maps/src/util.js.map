{"version":3,"sources":["src/util.ts"],"names":[],"mappings":";AAAA,IAAI,SAAS,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,UAAU,CAAC,EAAE,CAAC;IACtD,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAAC,EAAE,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;YAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACtD,gBAAgB,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;IACvC,EAAE,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC;IAC3B,CAAC,CAAC,SAAS,GAAG,IAAI,EAAE,EAAE,CAAC;AAC3B,CAAC,CAAC;AAEF,IAAI,cAAc,GAAG,cAAa,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAA,CAAC,CAAC,CAAA;AAMtE;;;;GAIG;AAEH,qBAA4B,MAAM;IAChC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;AACrC,CAAC;AAFe,mBAAW,cAE1B,CAAA;AAED,gBAAuB,IAAI;IACzB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,UAAS,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA,CAAC,CAAC,CAAC,CAAC;AAC/D,CAAC;AAFe,cAAM,SAErB,CAAA;AAED,qBAA4B,MAAM,EAAE,KAAK;IACvC,GAAG,CAAA,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC;QACnB,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACjB,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,GAAG,CAAA,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC;YACpB,EAAE,CAAA,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBAAC,KAAK,GAAG,KAAK,CAAC;QACtD,CAAC;QACD,EAAE,CAAA,CAAC,KAAK,CAAC;YAAC,KAAK,CAAC,EAAE,EAAE,CAAC;IACvB,CAAC;AACH,CAAC;AATe,mBAAW,cAS1B,CAAA","file":"src/util.js","sourcesContent":["var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\n\nvar notImplemented = function() { throw new Error('not implemented') }\n\nexport interface Factory {\n  create(): any;\n}\n\n/*export function defClass(sup, ctor, props) {\n  if(sup) __extends(ctor, sup);\n  for(var i in props) ctor.prototype[i] = props[i];\n  return ctor;\n}*/\n\nexport function mergeArrays(arrays) {\n  return [].concat.apply([], arrays);\n}\n\nexport function values(dict) {\n  return Object.keys(dict).map(function(k) { return dict[k] });\n}\n\nexport function multiSwitch(values, cases) {\n  for(var i in cases) {\n    var c = cases[i];\n    var match = true;\n    for(var j in values) {\n      if(values[j] !== cases.conditions[j]) match = false;\n    }\n    if(match) cases.do();\n  }\n}"],"sourceRoot":"/source/"}