{"version":3,"sources":["src/server.ts"],"names":[],"mappings":"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","file":"src/server.js","sourcesContent":["import connect = require(\"connect\");\nimport fs = require(\"fs\");\n\nimport abnfTokenizer = require(\"abnfjs/tokenizer\");\nimport abnfParser = require(\"abnfjs/parser\");\nimport abnfInterpreter = require(\"abnfjs/interpreter\");\n\nimport ast2query = require(\"./odata/ast2query\");\nimport schema = require(\"./odata/schema\");\n\nimport sparqlQueries = require(\"./adapter/queries_sparql\");\n\nimport providerModule = require(\"./sparql/sparql_provider\");\n\nimport rdfstore = require(\"rdfstore\");\n\nlet config = {\n  port: 52999,\n  path: \"/\",\n};\n\nlet schm = new schema.Schema();\n\nlet abnf = fs.readFileSync(\"./src/odata/odata4-mod.abnf\", \"utf8\");\nlet tokens = abnfTokenizer.tokenize(abnf);\nlet grammar = abnfParser.parse(tokens);\nlet interpreter = new abnfInterpreter.Interpreter(grammar);\n\nlet store = null;\nlet provider;\nlet storeName = \"http://datokrat.sirius.uberspace.de/disco-test\";\n\nlet app = connect();\n\napp.use(config.path, function(req, res, next) {\n\t// TODO: check if something important changes when config.path != '/'\n  let url = req.url.substr(1);\n\n  let ast = interpreter.getCompleteMatch(interpreter.getPattern(\"odataRelativeUri\"), url);\n  let queryModel = ast2query.getQueryModelFromEvaluatedAst(ast.evaluate(), schm.raw);\n  let query = (new sparqlQueries.QueryFactory(queryModel, schm)).create();\n\n  query.run(provider, function() {\n    query.sendResults(res);\n  });\n});\n\nrdfstore.create(function(error, st) {\n  store = st;\n  storeSeed(function(err) {\n    if (err) console.error(\"seed failed\", err);\n    else startServer();\n  });\n});\n\nfunction storeSeed(cb) {\n  store.rdf.setPrefix(\"rdf\", \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\");\n  store.rdf.setPrefix(\"rdfs\", \"http://www.w3.org/2000/01/rdf-schema#\");\n  store.rdf.setPrefix(\"disco\", \"http://disco-network.org/resource/\");\n\n  let graph = store.rdf.createGraph();\n  graph.add(store.rdf.createTriple(\n    store.rdf.createNamedNode(store.rdf.resolve(\"disco:post1\")),\n    store.rdf.createNamedNode(store.rdf.resolve(\"rdf:type\")),\n    store.rdf.createNamedNode(store.rdf.resolve(\"disco:Post\"))\n  ));\n  graph.add(store.rdf.createTriple(\n    store.rdf.createNamedNode(store.rdf.resolve(\"disco:post1\")),\n    store.rdf.createNamedNode(store.rdf.resolve(\"disco:id\")),\n    store.rdf.createLiteral(\"1\") // TODO: TYPE\n  ));\n  graph.add(store.rdf.createTriple(\n    store.rdf.createNamedNode(store.rdf.resolve(\"disco:post1\")),\n    store.rdf.createNamedNode(store.rdf.resolve(\"disco:content\")),\n    store.rdf.createNamedNode(store.rdf.resolve(\"disco:post1\")) // TODO: TYPE\n  ));\n  graph.add(store.rdf.createTriple(\n    store.rdf.createNamedNode(store.rdf.resolve(\"disco:post1\")),\n    store.rdf.createNamedNode(store.rdf.resolve(\"disco:parent\")),\n    store.rdf.createLiteral(\"null\") // TODO: MAKE OPTIONAL\n  ));\n\n  store.insert(graph, storeName, cb);\n}\n\nfunction startServer() {\n  provider = new providerModule.SparqlProvider(store, storeName);\n  app.listen(config.port);\n  console.log(\"server is listening on port \" + config.port);\n}\n"],"sourceRoot":"/source/"}