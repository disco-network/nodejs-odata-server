{"version":3,"sources":["src/odata/queries.ts"],"names":[],"mappings":"AAAA,cAAc;;AAcd;;GAEG;AACH;IAAA;IAaA,CAAC;IAZC,mEAAmE;IAC5D,uCAAQ,GAAf,UAAgB,MAAM,EAAE,OAAqB;QAC3C,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,OAAO,CAAC,iCAAiC,CAAC,MAAM,EAAE,UAAS,KAAK,EAAE,QAAQ;YACxE,GAAG,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,GAAG,KAAK,CAAC;QAClC,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,8BAA8B,CAAC,MAAM,EAAE,UAAS,SAAS,EAAE,QAAQ;YACzE,GAAG,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;QAChG,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,GAAG,CAAC;IACb,CAAC;IACH,2BAAC;AAAD,CAbA,AAaC,IAAA;AAbY,4BAAoB,uBAahC,CAAA;AAQD,WAAY,UAAU;IACpB,2CAAI,CAAA;IACJ,uCAAE,CAAA;IACF,uEAAkB,CAAA;IAClB,qEAAiB,CAAA;AACnB,CAAC,EALW,kBAAU,KAAV,kBAAU,QAKrB;AALD,IAAY,UAAU,GAAV,kBAKX,CAAA","file":"src/odata/queries.js","sourcesContent":["/** @module */\n\nexport interface Query {\n  run(sparqlProvider, cb: () => void): void;\n  sendResults(res): void;\n}\n\nexport interface QueryModel {\n  entitySetName: string;\n  path: any[]; /** navigation path */\n  filterOption: any;\n  expandTree: any;\n}\n\n/** This class can be used to generate odata output from different sources.\n * The concrete database logic is handled by the result and context parameters.\n */\nexport class QueryResultEvaluator {\n  // result type corresponds to what's needed by the context instance\n  public evaluate(result, context: QueryContext): any {\n    let self = this;\n    let ret = {};\n    context.forEachElementaryPropertyOfResult(result, function(value, property) {\n      ret[property.getName()] = value;\n    });\n    context.forEachComplexPropertyOfResult(result, function(subResult, property) {\n      ret[property.getName()] = self.evaluate(subResult, context.getSubContext(property.getName()));\n    });\n    return ret;\n  }\n}\n\nexport interface QueryContext {\n  forEachElementaryPropertyOfResult(result, fn: (value, property) => void): void;\n  forEachComplexPropertyOfResult(result, fn: (subResult, property) => void): void;\n  getSubContext(property: string): QueryContext;\n}\n\nexport enum ErrorTypes {\n  NONE,\n  DB,\n  ENTITYSET_NOTFOUND,\n  PROPERTY_NOTFOUND,\n}\n"],"sourceRoot":"/source/"}