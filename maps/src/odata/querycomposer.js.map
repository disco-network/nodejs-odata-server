{"version":3,"sources":["src/odata/querycomposer.ts"],"names":[],"mappings":";AAGA;IAUE,uBAAY,aAAqB,EAAE,MAAM;QACvC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QACf,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;QACtD,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;IAClC,CAAC;IAEM,8BAAM,GAAb,UAAc,YAAY;QACxB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAEM,8BAAM,GAAb,UAAc,YAAY;QACxB,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACtC,CAAC,YAAY,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,UAAS,CAAC;YACrC,IAAI,aAAa,GAAG,UAAU,CAAC;YAC/B,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,UAAA,IAAI;gBACjB,aAAa,GAAG,aAAa,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;YAClE,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,kCAAU,GAAjB,UAAkB,EAAE;QAClB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC;YAAC,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;QAC5F,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE,cAAc,EAAE,KAAK,EAAE,CAAC,CAAC;QACjE,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;QACjC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IACxE,CAAC;IAEM,sCAAc,GAArB,UAAsB,QAAgB;QACpC,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC;YAAC,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;QAC5F,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC;YAAC,MAAM,IAAI,KAAK,CAAC,2BAA2B,GAAG,QAAQ,CAAC,CAAC;QAC7G,IAAI,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAC7D,IAAI,CAAC,mBAAmB,GAAG,cAAc,CAAC,QAAQ,KAAK,aAAa,IAAI,cAAc,CAAC,QAAQ,KAAK,cAAc,CAAC;QACnH,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,QAAQ,EAAE,cAAc,EAAE,MAAM,EAAE,CAAC,CAAC;QAC7E,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC;YAC3B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAClE,IAAI;YACF,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IAChE,CAAC;IAEM,wCAAgB,GAAvB,UAAwB,IAAI;QAC1B,MAAM,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;IACxB,CAAC;IAEM,oCAAY,GAAnB,UAAoB,IAAI;QACtB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IACvC,CAAC;IACH,oBAAC;AAAD,CA1DA,AA0DC,IAAA;AA1DY,qBAAa,gBA0DzB,CAAA","file":"src/odata/querycomposer.js","sourcesContent":["/** @module */\nimport Queries = require(\"./queries\");\n\nexport class QueryComposer implements Queries.QueryModel {\n  public entitySetName: string;\n  public path: any[];\n  public filterOption: any;\n  public expandTree: any;\n\n  private schema: any;\n  private currentSchema: any;\n  private currentIsCollection: boolean;\n\n  constructor(entitySetName: string, schema) {\n    this.entitySetName = entitySetName;\n    this.path = [];\n    this.schema = schema;\n    this.currentSchema = schema.entitySets[entitySetName];\n    this.currentIsCollection = true;\n  }\n\n  public filter(filterOption): void {\n    this.filterOption = filterOption;\n  }\n\n  public expand(expandOption): void {\n    let expandTree = this.expandTree = {};\n    (expandOption || []).forEach(function(e) {\n      let currentBranch = expandTree;\n      e.path.forEach(prop => {\n        currentBranch = currentBranch[prop] = currentBranch[prop] || {};\n      });\n    });\n  }\n\n  public selectById(id): void {\n    if (!this.currentIsCollection) throw new Error(\"current query part should be a collection\");\n    this.path.push({ type: \"by-id\", id: id, resultQuantity: \"one\" });\n    this.currentIsCollection = false;\n    this.currentSchema = this.schema.entityTypes[this.currentSchema.type];\n  }\n\n  public selectProperty(property: string): void {\n    if (this.currentIsCollection) throw new Error(\"current query part should be no collection\");\n    if (this.currentSchema.properties[property] == null) throw new Error(\"property does not exist: \" + property);\n    let propertySchema = this.currentSchema.properties[property];\n    this.currentIsCollection = propertySchema.quantity === \"many-to-one\" || propertySchema.quantity === \"many-to-many\";\n    this.path.push({ type: \"property\", name: property, resultQuantity: \"many\" });\n    if (this.currentIsCollection)\n      this.currentSchema = this.collectionSchema(propertySchema.type);\n    else\n      this.currentSchema = this.singleSchema(propertySchema.type);\n  }\n\n  public collectionSchema(type) {\n    return { type: type };\n  }\n\n  public singleSchema(type) {\n    return this.schema.entityTypes[type];\n  }\n}\n"],"sourceRoot":"/source/"}