{"version":3,"sources":["src/odata/ast2query.ts"],"names":[],"mappings":";AAAA,cAAc;AACd,IAAO,aAAa,WAAW,iBAAiB,CAAC,CAAC;AAElD,uCAA8C,aAAa,CAAA,GAAG,EAAE,MAAM;IACpE,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,eAAe,CAAC,CAAC,CAAC;QACjC,EAAE,CAAC,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,KAAK,WAAW,CAAC;YACxC,MAAM,IAAI,KAAK,CAAC,kCAAkC,GAAG,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAC9E,EAAE,CAAC,CAAC,GAAG,CAAC,YAAY,CAAC,UAAU,IAAI,GAAG,CAAC,YAAY,CAAC,UAAU,CAAC,uBAAuB,CAAC;YACrF,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;QAE9D,IAAI,IAAI,GAAG,IAAI,aAAa,CAAC,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;QACnF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QACrC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QACrC,MAAM,CAAC,CAAC,GAAG,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;YACzC,KAAK,MAAM;gBACT,MAAM,CAAC,IAAI,CAAC;YACd,KAAK,uBAAuB;gBAC1B,IAAI,OAAO,GAAG,GAAG,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC;gBAC/C,IAAI,GAAG,GAAG,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,mBAAmB;gBACjF,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;gBACrB,EAAE,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;oBAC7B,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,gBAAgB,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;gBAC1E,CAAC;gBACD,MAAM,CAAC,IAAI,CAAC;YACd;gBACE,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;QAC1E,CAAC;IACH,CAAC;IACD,IAAI;QAAC,MAAM,IAAI,KAAK,CAAC,0BAA0B,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC;AAC9D,CAAC;AA1Be,qCAA6B,gCA0B5C,CAAA","file":"src/odata/ast2query.js","sourcesContent":["/** @module */\nimport queryComposer = require(\"./querycomposer\");\n\nexport function getQueryModelFromEvaluatedAst(/*evaluated*/ast, schema) {\n  if (ast.type === \"resourceQuery\") {\n    if (ast.resourcePath.type !== \"entitySet\")\n      throw new Error(\"unsupported resource path type: \" + ast.resourcePath.type);\n    if (ast.resourcePath.navigation && ast.resourcePath.navigation.qualifiedEntityTypeName)\n      throw new Error(\"qualified entity type name not supported\");\n\n    let comp = new queryComposer.QueryComposer(ast.resourcePath.entitySetName, schema);\n    comp.filter(ast.queryOptions.filter);\n    comp.expand(ast.queryOptions.expand);\n    switch (ast.resourcePath.navigation.type) {\n      case \"none\":\n        return comp;\n      case \"collection-navigation\":\n        let navPath = ast.resourcePath.navigation.path;\n        let key = parseInt(navPath.keyPredicate.simpleKey.value, 10); // TODO: check type\n        comp.selectById(key);\n        if (navPath.singleNavigation) {\n          comp.selectProperty(navPath.singleNavigation.propertyPath.propertyName);\n        }\n        return comp;\n      default:\n        throw new Error(\"this resourcePath navigation type is not supported\");\n    }\n  }\n  else throw new Error(\"unsupported query type: \" + ast.type);\n}\n"],"sourceRoot":"/source/"}