{"version":3,"sources":["src/adapter/querystring_builder.ts"],"names":[],"mappings":";AAEA;IAAA;QACU,aAAQ,GAA6B,EAAG,CAAC;IAsCnD,CAAC;IApCQ,yCAAY,GAAnB,UAAoB,MAAc,EAAE,GAAW;QAC7C,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC;IAC9B,CAAC;IAEM,2DAA8B,GAArC,UAAsC,YAAwC;QAA9E,iBAgBC;QAfC,IAAI,aAAa,GAAG,YAAY,CAAC,gBAAgB,EAAE,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAX,CAAW,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACtF,IAAI,iBAAiB,GAAG,YAAY,CAAC,iBAAiB,EAAE;aACrD,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,8BAA8B,CAAC,CAAC,CAAC,EAAtC,CAAsC,CAAC;aAChD,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,KAAK,EAAE,EAAV,CAAU,CAAC;aACzB,IAAI,CAAC,KAAK,CAAC,CAAC;QACf,IAAI,YAAY,GAAG,YAAY,CAAC,gBAAgB,EAAE;aAC/C,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC,EAA/B,CAA+B,CAAC;aACzC,IAAI,CAAC,SAAS,CAAC,CAAC;QACnB,IAAI,KAAK,GAAG,EAAE,CAAC;QAEf,EAAE,CAAC,CAAC,aAAa,KAAK,EAAE,CAAC;YAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACpD,EAAE,CAAC,CAAC,iBAAiB,KAAK,EAAE,CAAC;YAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC5D,EAAE,CAAC,CAAC,YAAY,KAAK,EAAE,CAAC;YAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAElD,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;IAEM,oDAAuB,GAA9B,UAA+B,YAAwC;QACrE,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,8BAA8B,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;IACzE,CAAC;IACM,8CAAiB,GAAxB;QACE,IAAI,KAAK,GAAa,EAAG,CAAC;QAC1B,GAAG,CAAC,CAAC,IAAI,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACjC,KAAK,CAAC,IAAI,CAAC,SAAS,GAAG,MAAM,GAAG,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC;QACvE,CAAC;QACD,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACzB,CAAC;IACM,6CAAgB,GAAvB,UAAwB,YAAwC;QAC9D,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE;YAC7B,kBAAkB,GAAG,IAAI,CAAC,uBAAuB,CAAC,YAAY,CAAC,CAAC;IACpE,CAAC;IACH,yBAAC;AAAD,CAvCA,AAuCC,IAAA;AAvCY,0BAAkB,qBAuC9B,CAAA","file":"src/adapter/querystring_builder.js","sourcesContent":["import gpatterns = require(\"./sparql_graphpatterns\");\n\nexport class QueryStringBuilder {\n  private prefixes: { [id: string]: string } = { };\n\n  public insertPrefix(prefix: string, uri: string) {\n    this.prefixes[prefix] = uri;\n  }\n\n  public buildGraphPatternContentString(graphPattern: gpatterns.TreeGraphPattern): string {\n    let triplesString = graphPattern.getDirectTriples().map(t => t.join(\" \")).join(\" . \");\n    let subPatternsString = graphPattern.getBranchPatterns()\n      .map(p => this.buildGraphPatternContentString(p))\n      .filter(str => str !== \"\")\n      .join(\" . \");\n    let unionsString = graphPattern.getUnionPatterns()\n      .map(p => this.buildGraphPatternString(p))\n      .join(\" UNION \");\n    let parts = [];\n\n    if (triplesString !== \"\") parts.push(triplesString);\n    if (subPatternsString !== \"\") parts.push(subPatternsString);\n    if (unionsString !== \"\") parts.push(unionsString);\n\n    return parts.join(\" . \");\n  }\n\n  public buildGraphPatternString(graphPattern: gpatterns.TreeGraphPattern): string {\n    return \"{ \" + this.buildGraphPatternContentString(graphPattern) + \" }\";\n  }\n  public buildPrefixString() {\n    let parts: string[] = [ ];\n    for (let prefix in this.prefixes) {\n      parts.push(\"PREFIX \" + prefix + \": <\" + this.prefixes[prefix] + \">\");\n    }\n    return parts.join(\" \");\n  }\n  public fromGraphPattern(graphPattern: gpatterns.TreeGraphPattern): string {\n    return this.buildPrefixString() +\n      \" SELECT * WHERE \" + this.buildGraphPatternString(graphPattern);\n  }\n}\n"],"sourceRoot":"/source/"}