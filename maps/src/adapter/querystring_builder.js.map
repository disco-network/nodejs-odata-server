{"version":3,"sources":["src/adapter/querystring_builder.ts"],"names":[],"mappings":";AAEA;IAAA;QACU,aAAQ,GAA6B,EAAG,CAAC;IAyBnD,CAAC;IAvBQ,yCAAY,GAAnB,UAAoB,MAAc,EAAE,GAAW;QAC7C,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC;IAC9B,CAAC;IAEM,oDAAuB,GAA9B,UAA+B,YAAwC;QAAvE,iBAOC;QANC,IAAI,OAAO,GAAG,YAAY,CAAC,UAAU,EAAE,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAX,CAAW,CAAC,CAAC;QAC9D,IAAI,MAAM,GAAG,YAAY,CAAC,gBAAgB,EAAE;aACzC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC,EAA/B,CAA+B,CAAC;aACzC,IAAI,CAAC,SAAS,CAAC,CAAC;QACnB,IAAI,KAAK,GAAG,CAAE,MAAM,KAAK,EAAE,CAAE,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC;QACjE,MAAM,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;IACzC,CAAC;IACM,8CAAiB,GAAxB;QACE,IAAI,KAAK,GAAa,EAAG,CAAC;QAC1B,GAAG,CAAC,CAAC,IAAI,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACjC,KAAK,CAAC,IAAI,CAAC,SAAS,GAAG,MAAM,GAAG,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC;QACvE,CAAC;QACD,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACzB,CAAC;IACM,6CAAgB,GAAvB,UAAwB,YAAwC;QAC9D,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE;YAC7B,kBAAkB,GAAG,IAAI,CAAC,uBAAuB,CAAC,YAAY,CAAC,CAAC;IACpE,CAAC;IACH,yBAAC;AAAD,CA1BA,AA0BC,IAAA;AA1BY,0BAAkB,qBA0B9B,CAAA","file":"src/adapter/querystring_builder.js","sourcesContent":["import gpatterns = require(\"./sparql_graphpatterns\");\n\nexport class QueryStringBuilder {\n  private prefixes: { [id: string]: string } = { };\n\n  public insertPrefix(prefix: string, uri: string) {\n    this.prefixes[prefix] = uri;\n  }\n\n  public buildGraphPatternString(graphPattern: gpatterns.TreeGraphPattern): string {\n    let triples = graphPattern.getTriples().map(t => t.join(\" \"));\n    let unions = graphPattern.getUnionPatterns()\n      .map(p => this.buildGraphPatternString(p))\n      .join(\" UNION \");\n    let parts = ( unions !== \"\" ) ? triples.concat(unions) : triples;\n    return \"{ \" + parts.join(\" . \") + \" }\";\n  }\n  public buildPrefixString() {\n    let parts: string[] = [ ];\n    for (let prefix in this.prefixes) {\n      parts.push(\"PREFIX \" + prefix + \": <\" + this.prefixes[prefix] + \">\");\n    }\n    return parts.join(\" \");\n  }\n  public fromGraphPattern(graphPattern: gpatterns.TreeGraphPattern): string {\n    return this.buildPrefixString() +\n      \" SELECT * WHERE \" + this.buildGraphPatternString(graphPattern);\n  }\n}\n"],"sourceRoot":"/source/"}