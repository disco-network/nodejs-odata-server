{"version":3,"sources":["src/adapter/query_engine.ts"],"names":[],"mappings":";AAAA,IAAO,aAAa,WAAW,kBAAkB,CAAC,CAAC;AACnD,IAAO,UAAU,WAAW,eAAe,CAAC,CAAC;AAC7C,IAAO,eAAe,WAAW,oBAAoB,CAAC,CAAC;AAGvD,IAAO,SAAS,WAAW,oBAAoB,CAAC,CAAC;AACjD,IAAO,MAAM,WAAW,iBAAiB,CAAC,CAAC;AAC3C,IAAO,aAAa,WAAW,2BAA2B,CAAC,CAAC;AAE5D,IAAO,EAAE,WAAW,IAAI,CAAC,CAAC;AAE1B;IAKE;QAFQ,SAAI,GAAG,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;QAGjC,IAAI,IAAI,GAAG,EAAE,CAAC,YAAY,CAAC,6BAA6B,EAAE,MAAM,CAAC,CAAC;QAClE,IAAI,MAAM,GAAG,IAAI,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC9C,IAAI,OAAO,GAAG,IAAI,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC3C,IAAI,CAAC,WAAW,GAAG,IAAI,eAAe,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAC9D,CAAC;IAEM,uCAAiB,GAAxB,UAAyB,KAAwC;QAC/D,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;IAC9B,CAAC;IAEM,2BAAK,GAAZ,UAAa,WAAmB,EAAE,EAAyB;QACzD,IAAI,GAAG,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAEhC,IAAI,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,kBAAkB,CAAC,EAAE,GAAG,CAAC,CAAC;QAClG,IAAI,UAAU,GAAG,SAAS,CAAC,6BAA6B,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACxF,IAAI,KAAK,GAAG,CAAC,IAAI,aAAa,CAAC,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;QAC7E,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;IACrC,CAAC;IACH,kBAAC;AAAD,CAxBA,AAwBC,IAAA;AAxBY,mBAAW,cAwBvB,CAAA","file":"src/adapter/query_engine.js","sourcesContent":["import abnfTokenizer = require(\"abnfjs/tokenizer\");\nimport abnfParser = require(\"abnfjs/parser\");\nimport abnfInterpreter = require(\"abnfjs/interpreter\");\n\nimport sparqlProvider = require(\"../sparql/sparql_provider_base\");\nimport ast2query = require(\"../odata/ast2query\");\nimport schema = require(\"../odata/schema\");\nimport sparqlQueries = require(\"../adapter/queries_sparql\");\n\nimport fs = require(\"fs\");\n\nexport class QueryEngine {\n  private interpreter: abnfInterpreter.Interpreter;\n  private sparqlProvider: sparqlProvider.SparqlProviderBase;\n  private schm = new schema.Schema();\n\n  constructor() {\n    let abnf = fs.readFileSync(\"./src/odata/odata4-mod.abnf\", \"utf8\");\n    let tokens = new abnfTokenizer.tokenize(abnf);\n    let grammar = new abnfParser.parse(tokens);\n    this.interpreter = new abnfInterpreter.Interpreter(grammar);\n  }\n\n  public setSparqlProvider(value: sparqlProvider.SparqlProviderBase) {\n    this.sparqlProvider = value;\n  }\n\n  public query(queryString: string, cb: (result: any) => void) {\n    let url = queryString.substr(1);\n\n    let ast = this.interpreter.getCompleteMatch(this.interpreter.getPattern(\"odataRelativeUri\"), url);\n    let queryModel = ast2query.getQueryModelFromEvaluatedAst(ast.evaluate(), this.schm.raw);\n    let query = (new sparqlQueries.QueryFactory(queryModel, this.schm)).create();\n    query.run(this.sparqlProvider, cb);\n  }\n}\n"],"sourceRoot":"/source/"}