{"version":3,"sources":["src/adapter/queries_sparql.ts"],"names":[],"mappings":";AAAA,cAAc;AACd,IAAO,QAAQ,WAAW,mBAAmB,CAAC,CAAC;AAC/C,IAAO,SAAS,WAAW,wBAAwB,CAAC,CAAC;AACrD,IAAO,SAAS,WAAW,uBAAuB,CAAC,CAAC;AACpD,IAAO,YAAY,WAAW,kBAAkB,CAAC,CAAC;AAElD;;;GAGG;AACH;IACE,sBAAoB,KAA8B,EAAU,MAAM;QAA9C,UAAK,GAAL,KAAK,CAAyB;QAAU,WAAM,GAAN,MAAM,CAAA;IAAI,CAAC;IAChE,6BAAM,GAAb;QACE,MAAM,CAAC,IAAI,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACrD,CAAC;IACH,mBAAC;AAAD,CALA,AAKC,IAAA;AALY,oBAAY,eAKxB,CAAA;AAED;;;;GAIG;AACH;IAEE,wBAAoB,KAA8B,EAAU,MAAM;QAA9C,UAAK,GAAL,KAAK,CAAyB;QAAU,WAAM,GAAN,MAAM,CAAA;IAAI,CAAC;IAEhE,4BAAG,GAAV,UAAW,cAAc,EAAE,EAAc;QAAzC,iBA+BC;QA9BC,IAAI,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QACnE,IAAI,UAAU,GAAG,SAAS,CAAC,aAAa,EAAE,CAAC;QAE3C,IAAI,MAAM,GAAG,IAAI,QAAQ,CAAC,uBAAuB,EAAE,CAAC;QACpD,IAAI,eAAe,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;QAEpC,IAAI,OAAO,GAAG,IAAI,QAAQ,CAAC,+BAA+B,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;QACpF,IAAI,YAAY,GAAG,IAAI,kBAAkB,CAAC,OAAO,EAAE,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QACtF,IAAI,YAAY,GAAG,IAAI,SAAS,CAAC,sBAAsB,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;QACpG,IAAI,SAAS,GAAG,IAAI,YAAY,CAAC,oBAAoB,EAAE,CAAC;QAExD,kDAAkD;QAElD,IAAI,kBAAkB,GAAG,IAAI,SAAS,CAAC,kBAAkB,EAAE,CAAC;QAC5D,kBAAkB,CAAC,YAAY,CAAC,KAAK,EAAE,6CAA6C,CAAC,CAAC;QACtF,kBAAkB,CAAC,YAAY,CAAC,OAAO,EAAE,oCAAoC,CAAC,CAAC;QAC/E,IAAI,WAAW,GAAG,kBAAkB,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;QACpE,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACzB,cAAc,CAAC,WAAW,CAAC,WAAW,EAAE,UAAA,MAAM;YAC5C,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;gBAClB,KAAI,CAAC,MAAM,GAAG,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,UAAA,MAAM;wBAC9C,IAAI,MAAM,GAAG,SAAS,CAAC,QAAQ,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;wBACtD,MAAM,CAAC,MAAM,CAAC;oBAChB,CAAC,CAAC,EAAE,CAAC;YACP,CAAC;YACD,IAAI,CAAC,CAAC;gBACJ,KAAI,CAAC,MAAM,GAAG,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC;YACxC,CAAC;YACD,EAAE,EAAE,CAAC;QACP,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACI,oCAAW,GAAlB,UAAmB,GAAG;QACpB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YACvB,GAAG,CAAC,WAAW,CAAC,GAAG,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,CAAC;YAC7D,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;QACvD,CAAC;QACD,IAAI,CAAC,CAAC;YACJ,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QACjC,CAAC;IACH,CAAC;IACH,qBAAC;AAAD,CAjDA,AAiDC,IAAA;AAjDY,sBAAc,iBAiD1B,CAAA;AAED;;GAEG;AACH;IAKE,4BAAY,OAAiD,EAAE,cAAc,EAAE,qBAAqB;QAClG,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;IACrD,CAAC;IAEM,8DAAiC,GAAxC,UAAyC,MAAM,EAAE,EAAgD;QAC/F,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,IAAI,CAAC,OAAO,CAAC,yBAAyB,CAAC,UAAS,YAAY,EAAE,YAAY;YACxE,IAAI,GAAG,GAAG,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YACzC,EAAE,CAAC,CAAC,GAAG,CAAC;gBAAC,EAAE,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,2DAA8B,GAArC,UAAsC,MAAM,EAAE,EACiB;QAC7D,GAAG,CAAC,CAAC,IAAI,YAAY,IAAI,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;YACpD,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC;QAC5D,CAAC;IACH,CAAC;IAEM,4DAA+B,GAAtC,UAAuC,EAAsB;QAC3D,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,UAAS,YAAY,EAAE,YAAY;YACrE,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,yDAA4B,GAAnC,UAAoC,EAAsB;QACxD,GAAG,CAAC,CAAC,IAAI,YAAY,IAAI,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;YACpD,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC;QACpD,CAAC;IACH,CAAC;IAEM,0DAA6B,GAApC,UAAqC,MAAM,EAAE,YAAoB;QAC/D,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,6BAA6B,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IAC1F,CAAC;IAED,iEAAiE;IAC1D,0CAAa,GAApB,UAAqB,YAAoB;QACvC,2DAA2D;QAC3D,MAAM,CAAC,IAAI,kBAAkB,CAC3B,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,YAAY,CAAC,EAC7C,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,aAAa,EAAE,EAC7D,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC,CAAC;IAC9C,CAAC;IACH,yBAAC;AAAD,CAlDA,AAkDC,IAAA;AAlDY,0BAAkB,qBAkD9B,CAAA;AAED;;GAEG;AAEH,sBAAsB,MAAM,EAAE,GAAG;IAC/B,MAAM,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QACrB,KAAK,YAAY,CAAC,UAAU,CAAC,EAAE;YAC7B,GAAG,CAAC,UAAU,GAAG,GAAG,CAAC;YACrB,GAAG,CAAC,GAAG,CAAC,iBAAiB,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC;YACjD,KAAK,CAAC;QACR;YACE,GAAG,CAAC,UAAU,GAAG,GAAG,CAAC;YACrB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAChC,GAAG,CAAC,GAAG,CAAC,qBAAqB,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC;AACH,CAAC","file":"src/adapter/queries_sparql.js","sourcesContent":["/** @module */\nimport mappings = require(\"./sparql_mappings\");\nimport gpatterns = require(\"./sparql_graphpatterns\");\nimport qsBuilder = require(\"./querystring_builder\");\nimport ODataQueries = require(\"../odata/queries\");\n\n/**\n * @class\n * Used to generate query objects which can be run to modify and/or retrieve data.\n */\nexport class QueryFactory {\n  constructor(private model: ODataQueries.QueryModel, private schema) { }\n  public create(): ODataQueries.Query {\n    return new EntitySetQuery(this.model, this.schema);\n  }\n}\n\n/**\n * @namespace\n * @name EntitySetQuery\n * @description Handles read-only OData queries.\n */\nexport class EntitySetQuery implements ODataQueries.Query {\n  private result: { error?: any, result?: any };\n  constructor(private model: ODataQueries.QueryModel, private schema) { }\n\n  public run(sparqlProvider, cb: () => void): void {\n    let setSchema = this.schema.getEntitySet(this.model.entitySetName);\n    let entityType = setSchema.getEntityType();\n\n    let vargen = new mappings.SparqlVariableGenerator();\n    let chosenEntityVar = vargen.next();\n\n    let mapping = new mappings.StructuredSparqlVariableMapping(chosenEntityVar, vargen);\n    let queryContext = new SparqlQueryContext(mapping, entityType, this.model.expandTree);\n    let graphPattern = new gpatterns.ExpandTreeGraphPattern(entityType, this.model.expandTree, mapping);\n    let evaluator = new ODataQueries.QueryResultEvaluator();\n\n    // let triplePatterns = graphPattern.getTriples();\n\n    let queryStringBuilder = new qsBuilder.QueryStringBuilder();\n    queryStringBuilder.insertPrefix(\"rdf\", \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\");\n    queryStringBuilder.insertPrefix(\"disco\", \"http://disco-network.org/resource/\");\n    let queryString = queryStringBuilder.fromGraphPattern(graphPattern);\n    console.log(queryString);\n    sparqlProvider.querySelect(queryString, answer => {\n      if (!answer.error) {\n        this.result = { result: answer.result.map(single => {\n          let entity = evaluator.evaluate(single, queryContext);\n          return entity;\n        }) };\n      }\n      else {\n        this.result = { error: answer.error };\n      }\n      cb();\n    });\n  }\n\n  /** @method\n   * @description Pass the results of the query to the HTTP result object\n   */\n  public sendResults(res): void {\n    if (!this.result.error) {\n      res.writeHeader(200, { \"Content-type\": \"application/json\" });\n      res.end(JSON.stringify(this.result.result, null, 2));\n    }\n    else {\n      handleErrors(this.result, res);\n    }\n  }\n}\n\n/** @class\n * This class provides methods to interpret a SPARQL query result as OData.\n */\nexport class SparqlQueryContext implements ODataQueries.QueryContext {\n  private mapping: mappings.StructuredSparqlVariableMapping;\n  private rootTypeSchema: any;\n  private remainingExpandBranch: Object;\n\n  constructor(mapping: mappings.StructuredSparqlVariableMapping, rootTypeSchema, remainingExpandBranch) {\n    this.mapping = mapping;\n    this.rootTypeSchema = rootTypeSchema;\n    this.remainingExpandBranch = remainingExpandBranch;\n  }\n\n  public forEachElementaryPropertyOfResult(result, fn: (property: string, variable: string) => void): void {\n    let self = this;\n    this.mapping.forEachElementaryProperty(function(propertyName, variableName) {\n      let obj = result[variableName.substr(1)];\n      if (obj) fn(obj.value, self.rootTypeSchema.getProperty(propertyName));\n    });\n  }\n\n  public forEachComplexPropertyOfResult(result, fn: (property: string,\n      variable: mappings.StructuredSparqlVariableMapping) => void): void {\n    for (let propertyName in this.remainingExpandBranch) {\n      fn(result, this.rootTypeSchema.getProperty(propertyName));\n    }\n  }\n\n  public forEachElementaryPropertySchema(fn: (property) => void): void {\n    this.mapping.forEachComplexProperty(function(propertyName, variableName) {\n      fn(this.rootTypeSchema.getProperty(propertyName));\n    });\n  }\n\n  public forEachComplexPropertySchema(fn: (property) => void): void {\n    for (let propertyName in this.remainingExpandBranch) {\n      fn(this.rootTypeSchema.getProperty(propertyName));\n    }\n  }\n\n  public getElementaryPropertyOfResult(result, propertyName: string): any {\n    return result[this.mapping.getElementaryPropertyVariable(propertyName).substr(1)].value;\n  }\n\n  /** Return another context associated with a complex property. */\n  public getSubContext(propertyName: string): SparqlQueryContext {\n    /** @todo is it a good idea to create so many instances? */\n    return new SparqlQueryContext(\n      this.mapping.getComplexProperty(propertyName),\n      this.rootTypeSchema.getProperty(propertyName).getEntityType(),\n      this.remainingExpandBranch[propertyName]);\n  }\n}\n\n/** Stores the query results of a SPARQL query to satisfy an OData request.\n * To the data belongs an object with the properties of quantity one and @construction \n */\n\nfunction handleErrors(result, res) {\n  switch (result.error) {\n    case ODataQueries.ErrorTypes.DB:\n      res.statusCode = 500;\n      res.end(\"database error \" + result.errorDetails);\n      break;\n    default:\n      res.statusCode = 500;\n      console.log(result.error.stack);\n      res.end(\"unknown error type \" + result.error);\n  }\n}\n"],"sourceRoot":"/source/"}