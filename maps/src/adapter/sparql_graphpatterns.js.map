{"version":3,"sources":["src/adapter/sparql_graphpatterns.ts"],"names":[],"mappings":"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","file":"src/adapter/sparql_graphpatterns.js","sourcesContent":["/** @module */\nimport _ = require(\"../util\");\nimport Mappings = require(\"./sparql_mappings\");\nimport Schema = require(\"../odata/schema\");\n\n/**\n * Provides a SPARQL graph pattern consisting of mandatory and optional triples.\n */\nexport interface GraphPattern {\n  getTriples(): any[][];\n  getOptionalPatterns(): GraphPattern[];\n  getUnionPatterns(): GraphPattern[];\n}\n\n/**\n * Provides a SPARQL graph pattern whose triples are directly composible\n * and manipulatable.\n */\nexport class ComposibleGraphPattern implements GraphPattern {\n  public triples: any[][];\n  public optionalPatterns: GraphPattern[];\n  public unionPatterns: GraphPattern[];\n\n  constructor(triples?: any[][]) {\n    this.triples = triples || [];\n    this.optionalPatterns = [];\n    this.unionPatterns = []; /** @todo consider unionPatterns */\n  }\n\n  public getTriples(): any[][] {\n    return this.triples;\n  }\n\n  public getOptionalPatterns(): GraphPattern[] {\n    return this.optionalPatterns;\n  }\n\n  public getUnionPatterns(): GraphPattern[] {\n    return this.unionPatterns;\n  }\n\n  public integratePatterns(patterns: GraphPattern[]) {\n    this.triples = _.mergeArrays(\n      [this.triples].concat(patterns.map(p => p.getTriples()))\n    );\n\n    for (let i = 0; i < patterns.length; ++i) { this.integratePatternsAsOptional(patterns[i].getOptionalPatterns()); };\n  }\n\n  public integratePatternsAsOptional(patterns: GraphPattern[]) {\n    this.optionalPatterns.push.apply(this.optionalPatterns, patterns);\n  }\n}\n\n/**\n * Provides a SPARQL graph pattern whose triples are generated from a\n * property tree\n */\nexport class TreeGraphPattern implements GraphPattern {\n  private rootName: string;\n  private branches: { [id: string]: TreeGraphPattern[] } = { };\n  private valueLeaves: { [id: string]: ValueLeaf[] } = { };\n  private inverseBranches: { [id: string]: TreeGraphPattern[] } = { };\n  private optionalBranches: { [id: string]: TreeGraphPattern[] } = { };\n  private unionPatterns: TreeGraphPattern[] = [ ];\n\n  constructor(rootName: string) {\n    this.rootName = rootName;\n  }\n\n  public getTriples(): any[][] {\n    let triples: any[][] = [];\n    for (let property in this.valueLeaves) {\n      let leaves = this.valueLeaves[property];\n      leaves.forEach(leaf => {\n        triples.push([ this.name(), property, \"\\\"\" + leaf.value + \"\\\"\" ]);\n      });\n    }\n    for (let property in this.branches) {\n      let branches = this.branches[property];\n      branches.forEach(branch => {\n        triples.push([ this.name(), property, branch.name() ]);\n        triples.push.apply(triples, branch.getTriples());\n      });\n    }\n    for (let property in this.inverseBranches) {\n      let branches = this.inverseBranches[property];\n      branches.forEach(branch => {\n        triples.push([ branch.name(), property, this.name() ]);\n        triples.push.apply(triples, branch.getTriples());\n      });\n    }\n    return triples;\n  }\n\n  public getDirectTriples(): any[][] {\n    let triples: any[][] = [];\n    for (let property in this.valueLeaves) {\n      let leaves = this.valueLeaves[property];\n      leaves.forEach(leaf => {\n        triples.push([ this.name(), property, \"\\\"\" + leaf.value + \"\\\"\" ]);\n      });\n    }\n    for (let property in this.branches) {\n      let branches = this.branches[property];\n      branches.forEach(branch => {\n        triples.push([ this.name(), property, branch.name() ]);\n      });\n    }\n    for (let property in this.inverseBranches) {\n      let branches = this.inverseBranches[property];\n      branches.forEach(branch => {\n        triples.push([ branch.name(), property, this.name() ]);\n      });\n    }\n    return triples;\n  }\n\n  public getBranchPatterns(): TreeGraphPattern[] {\n    let branches: TreeGraphPattern[] = [];\n    for (let property in this.branches) {\n      branches.push.apply(branches, this.branches[property]);\n    }\n    for (let property in this.inverseBranches) {\n      branches.push.apply(branches, this.branches[property]);\n    }\n    return branches;\n  }\n\n  public getOptionalPatterns(): GraphPattern[] {\n    let self = this;\n    let patterns = [];\n    for (let property in this.optionalBranches) {\n      let branches = this.optionalBranches[property];\n      branches.forEach(branch => {\n        let gp = new ComposibleGraphPattern([[ self.name(), property, branch.name() ]]);\n        gp.integratePatterns([ branch ]);\n        patterns.push(gp);\n      });\n    }\n    return patterns;\n  }\n\n  public getUnionPatterns(): TreeGraphPattern[] {\n    return this.unionPatterns;\n  }\n\n  public name(): string {\n    return this.rootName;\n  }\n\n  public branch(property: string): TreeGraphPattern[];\n  public branch(property: string, arg: string): TreeGraphPattern;\n  public branch(property: string, arg: TreeGraphPattern): TreeGraphPattern;\n  public branch(property: string, arg: ValueLeaf): void;\n  public branch(property: string, arg?) {\n    switch (typeof arg) {\n      case \"undefined\": return this.branches[property];\n      case \"string\":\n        let pat = new TreeGraphPattern(arg);\n        return this.branch(property, pat);\n      case \"object\":\n        if (arg instanceof TreeGraphPattern) {\n          if (this.branches[property] !== undefined)\n            this.branches[property].push(arg);\n          else\n            this.branches[property] = [ arg as TreeGraphPattern ];\n          return arg;\n        }\n        else if (arg instanceof ValueLeaf) {\n          if (this.valueLeaves[property] !== undefined)\n            this.valueLeaves[property].push(arg);\n          else\n            this.valueLeaves[property] = [ arg as ValueLeaf ];\n          return;\n        }\n      default:\n        throw new Error(\"branch argument is neither string nor TreeGraphPattern respective ValueLeaf\");\n    }\n  }\n\n  public inverseBranch(property: string): TreeGraphPattern[];\n  public inverseBranch(property: string, arg: string): TreeGraphPattern;\n  public inverseBranch(property: string, arg: TreeGraphPattern): TreeGraphPattern;\n  public inverseBranch(property: string, arg?) {\n    switch (typeof arg) {\n      case \"undefined\": return this.inverseBranches[property];\n      case \"string\":\n        let pat = new TreeGraphPattern(arg);\n        return this.inverseBranch(property, pat);\n      case \"object\":\n        if (this.inverseBranches[property] !== undefined)\n          this.inverseBranches[property].push(arg);\n        else\n          this.inverseBranches[property] = [ arg ];\n        return arg;\n      default:\n        throw new Error(\"branch argument is neither string nor object\");\n    }\n  }\n\n  public optionalBranch(property: string): TreeGraphPattern[];\n  public optionalBranch(property: string, arg: string): TreeGraphPattern;\n  public optionalBranch(property: string, arg: TreeGraphPattern): TreeGraphPattern;\n  public optionalBranch(property, arg?) {\n    switch (typeof arg) {\n      case \"undefined\": return this.optionalBranches[property];\n      case \"string\":\n        let pat = new TreeGraphPattern(arg);\n        return this.optionalBranch(property, pat);\n      case \"object\":\n        if (this.optionalBranches[property] !== undefined)\n          this.optionalBranches[property].push(arg);\n        else\n          this.optionalBranches[property] = [ arg ];\n        return arg;\n      default:\n        throw new Error(\"branch argument is neither string nor object\");\n    }\n  }\n\n  public newUnionPattern(pattern?: TreeGraphPattern): TreeGraphPattern {\n    pattern = pattern || new TreeGraphPattern(this.name());\n    this.unionPatterns.push(pattern);\n    return pattern;\n  }\n\n  public branchExists(property: string): boolean {\n    return this.branches[property] !== undefined;\n  }\n\n  public merge(other: TreeGraphPattern): void {\n    if (this.rootName !== other.rootName) throw new Error(\"can\\'t merge trees with different roots\");\n    for (let property in other.branches) {\n      other.branches[property].forEach(branch => {\n        this.branch(property, branch);\n      });\n    }\n    for (let property in other.optionalBranches) {\n      other.optionalBranches[property].forEach(branch => {\n        this.optionalBranch(property, branch);\n      });\n    }\n  }\n}\n\nexport class ValueLeaf {\n  public value: string;\n\n  constructor(value: string) {\n    this.value = value;\n  }\n}\n\n/**\n * Provides a SPARQL graph pattern involving all the direct and elementary\n * properties belonging to the OData entity type passed as schema.\n * Please separate the options like this: \"no-id-property|some-other-option\"\n */\nexport class DirectPropertiesGraphPattern extends TreeGraphPattern {\n  constructor(entityType: Schema.EntityType, mapping: Mappings.StructuredSparqlVariableMapping, options: string) {\n    let entityVariable: string = mapping.getVariable();\n    super(entityVariable);\n\n    let propertyNames = entityType.getPropertyNames();\n    let properties = propertyNames.map(p => entityType.getProperty(p));\n\n    for (let i = 0; i < properties.length; ++i) {\n      let property = properties[i];\n      let propertyName = property.getName();\n      if (propertyName === \"Id\" && options.indexOf(\"no-id-property\") >= 0) continue;\n      if (property.isNavigationProperty() === false) {\n        if (!property.mirroredFromProperty()) {\n          // TODO: optional\n          this.branch(property.getNamespacedUri(), mapping.getElementaryPropertyVariable(propertyName));\n        }\n        else {\n          let mirroringProperty = property.mirroredFromProperty();\n          let propertyValueVar = mapping.getComplexProperty(mirroringProperty.getName()).getVariable();\n          if (mirroringProperty.isOptional() === false) {\n            this\n              .branch(mirroringProperty.getNamespacedUri(), propertyValueVar)\n              .branch(\"disco:id\", mapping.getElementaryPropertyVariable(propertyName));\n          }\n          else {\n            this\n              .optionalBranch(mirroringProperty.getNamespacedUri(), propertyValueVar)\n              .branch(\"disco:id\", mapping.getElementaryPropertyVariable(propertyName));\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Provides a SPARQL graph pattern according to an entity type schema,\n * an expand tree and a StructuredSparqlVariableMapping so that it contains\n * all the data necessary for an OData $expand query.\n */\nexport class ExpandTreeGraphPattern extends TreeGraphPattern {\n  constructor(entityType: Schema.EntityType, expandTree, mapping: Mappings.StructuredSparqlVariableMapping) {\n    super(mapping.getVariable());\n\n    this.branch(entityType.getProperty(\"Id\").getNamespacedUri(), mapping.getElementaryPropertyVariable(\"Id\"));\n\n    let directPropertyPattern = new DirectPropertiesGraphPattern(entityType, mapping, \"no-id-property\");\n    this.newUnionPattern(directPropertyPattern);\n    Object.keys(expandTree).forEach(propertyName => {\n      let property = entityType.getProperty(propertyName);\n      let propertyType = property.getEntityType();\n      // Next recursion level\n      let gp = new ExpandTreeGraphPattern(propertyType, expandTree[propertyName],\n        mapping.getComplexProperty(propertyName));\n      if (!property.hasDirectRdfRepresentation()) {\n        let inverseProperty = property.getInverseProperty();\n        let unionPattern = this.newUnionPattern();\n        unionPattern.inverseBranch(inverseProperty.getNamespacedUri(), gp);\n      }\n      else {\n        this.newUnionPattern().branch(property.getNamespacedUri(), gp);\n      }\n    });\n  }\n}\n"],"sourceRoot":"/source/"}