{"version":3,"sources":["src/sparql/sparql_provider.ts"],"names":[],"mappings":";AAGA;IACE,wBAAoB,KAAK,EAAU,SAAiB;QAAhC,UAAK,GAAL,KAAK,CAAA;QAAU,cAAS,GAAT,SAAS,CAAQ;IAAI,CAAC;IAElD,oCAAW,GAAlB,UAAmB,WAAmB,EAAE,EAAuC;QAC7E,0CAA0C;QAC1C,IAAI,CAAC,KAAK,CAAC,sBAAsB,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,UAAS,GAAG,EAAE,OAAO;YACxF,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACT,EAAE,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,CAAC;YAC1B,CAAC;YACD,IAAI,CAAC,CAAC;gBACJ,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;YACrB,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACH,qBAAC;AAAD,CAdA,AAcC,IAAA;AAdY,sBAAc,iBAc1B,CAAA","file":"src/sparql/sparql_provider.js","sourcesContent":["/** @module */\nimport base = require(\"./sparql_provider_base\");\n\nexport class SparqlProvider implements base.SparqlProviderBase {\n  constructor(private store, private graphName: string) { }\n\n  public querySelect(queryString: string, cb: (result: {error?, result?}) => void): void {\n    // TODO: ensure that query has kind SELECT\n    this.store.executeWithEnvironment(queryString, [this.graphName], [], function(err, results) {\n      if (!err) {\n        cb({ result: results });\n      }\n      else {\n        cb({ error: err });\n      }\n    });\n  }\n}\n"],"sourceRoot":"/source/"}